name: CI


on: [push, pull_request]


jobs:
  ##############################################################################
  # ubuntu with gcc
  ##############################################################################
  ubuntu-gcc:
    name: Ubuntu GCC

    runs-on: ubuntu-latest

    env:
      MAKE: "make -j"
      LOCAL: ${{ github.workspace }}/local
      LDFLAGS: "-Wl,-rpath,$LOCAL/lib"
      CFLAGS: "-Wall"

    steps:
      - uses: actions/checkout@v2

      - name: "Setup"
        run: |
          gcc --version
          make --version

      - name: "Build dependencies"
        run: |
          ./.build_dependencies

      - name: "Configure"
        run: |
          ./configure CFLAGS=${CFLAGS} --with-gmp=${LOCAL} \
              --with-mpfr=${LOCAL}

      - name: "Compile"
        run: |
          $MAKE
          ldd libflint.so

      - name: "Check"
        run: |
          $MAKE check



  ##############################################################################
  # macos with gcc
  ##############################################################################
  macos-gcc:
    name: macOS GCC

    runs-on: macos-latest

    env:
      MAKE: "make -j"
      LOCAL: ${{ github.workspace }}/local
      LDFLAGS: "-Wl,-rpath,$LOCAL/lib"
      CFLAGS: "-Wall"

    steps:
      - uses: actions/checkout@v2

      - name: "Setup"
        run: |
          brew install gcc
          brew install make
          gcc --version
          make --version

      - name: "Build dependencies"
        run: |
          ./.build_dependencies

      - name: "Configure"
        run: |
          ./configure CFLAGS=${CFLAGS} --with-gmp=${LOCAL} \
              --with-mpfr=${LOCAL}

      - name: "Compile"
        run: |
          $MAKE
          # Next line is there to check dependencies. But it does not work at
          # its current state.
          # otool -L libflint.so

      - name: "Check"
        run: |
          $MAKE check



  #############################################################################
  # cygwin with gcc
  #############################################################################
  cygwin-gcc:
    name: Cygwin GCC

    runs-on: windows-2019

    defaults:
      run:
        shell: C:\cygwin64\bin\bash.exe --login -o igncr '{0}'

    env:
      MAKE: "make -j"
      REPO: /cygdrive/d/a/flint2/flint2 # FIXME: De-hardcode this
      LOCAL: /usr
      LDFLAGS: "-Wl,-rpath,$LOCAL/lib"
      CFLAGS: "-Wall"

    steps:
      - uses: actions/checkout@v2

      - name: "Set up Cygwin"
        uses: gap-actions/setup-cygwin@v1
        with:
          EXTRA_PKGS_TO_INSTALL: "ldd,dos2unix"

      - name: "Setup"
        run: |
          gcc --version
          make --version

      # No need to build dependencies as GAP's cygwin installation includes both
      # GMP and MPFR.

      - name: "Configure"
        run: |
          cd ${REPO}
          dos2unix configure
          ./configure CFLAGS=${CFLAGS} --disable-static --with-gmp=${LOCAL} \
              --with-mpfr=${LOCAL}

          # This line is used in .build_dependencies, which we do not call on
          # Cygwin.
          echo "int flint_test_multiplier(){return 1;}" > test_helpers.c

      - name: "Compile"
        run: |
          cd ${REPO}
          $MAKE

      - name: "Check"
        run: |
          cd ${REPO}
          $MAKE check



  #############################################################################
  # ubuntu with clang
  #############################################################################
  ubuntu-clang:
    name: Ubuntu Clang

    runs-on: ubuntu-latest

    env:
      MAKE: "make -j"
      LOCAL: ${{ github.workspace }}/local
      LDFLAGS: "-Wl,-rpath,$LOCAL/lib"
      CFLAGS: "-Wall"
      CC: "clang"

    steps:
      - uses: actions/checkout@v2

      - name: "Setup"
        run: |
          sudo apt install clang
          clang --version
          make --version

      - name: "Build dependencies"
        run: |
          ./.build_dependencies

      - name: "Configure"
        run: |
          ./configure CFLAGS=${CFLAGS} CC=${CC} --with-gmp=${LOCAL} \
              --with-mpfr=${LOCAL}

      - name: "Compile"
        run: |
          $MAKE
          ldd libflint.so

      - name: "Check"
        run: |
          $MAKE check



  #############################################################################
  # ubuntu with gcc and cmake (no checks)
  #############################################################################
  ubuntu-cmake-gcc:
    name: Ubuntu GCC via CMake

    runs-on: ubuntu-latest

    env:
      MAKE: "make -j"
      LOCAL: ${{ github.workspace }}/local
      LDFLAGS: "-Wl,-rpath,$LOCAL/lib"
      CFLAGS: "-Wall"

    steps:
      - uses: actions/checkout@v2

      - name: "Setup"
        run: |
          sudo apt install cmake
          gcc --version
          make --version
          cmake --version

      - name: "Build dependencies"
        run: |
          ./.build_dependencies

      - name: "Configure"
        run: |
          mkdir build
          cd build
          cmake -G"Unix Makefiles" -DWITH_NTL=no -DBUILD_TESTING=yes \
              -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=${LOCAL} ..

      - name: "Compile"
        run: |
          cd build
          $MAKE
          ldd lib/libflint.so



  #############################################################################
  # mingw with gcc
  #############################################################################
  mingw64-gcc:
    name: MinGW GCC

    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2

      - name: "Setup"
        run: |
          gcc --version
          cmake --version
        shell: bash

      - name: "Configure"
        run: |
          mkdir -p build
          echo "int flint_test_multiplier(){return 1;}" > test_helpers.c
          cd build
          cmake -G "MinGW Makefiles" -DBUILD_TESTING=ON \
                                    -DCMAKE_BUILD_TYPE=Release ..
        shell: bash

      - name: "Compile"
        run: |
          cd build
          cmake --build . -- -j4
        shell: bash

      - name: "Check"
        run: |
          cd build
          ctest -j4 --output-on-failure --timeout 300
        shell: bash
